# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr: 
  branches:
    include:
      - azure-pipelines
trigger:
  branches:
    include:
      - azure-pipelines 
  tags:
    include:
      - "*"
  
variables:
  - name: k8sNamespace
    value: dbinclui

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: "docker-registry"

  - name: aksServiceConnection
    value: "AKS-DBSERVER"

  - name: dockerRepository
    value: "dbinclui/backend"

  - name: branchName
    value: $(Build.SourceBranchName)

  - name: acrUrl
    value: "dbserverregistry.azurecr.io/dbinclui/backend"

  - name: isTag
    value: $(startsWith(variables['Build.SourceBranch'],'refs/tags/')))

  - name: isMergePR
    value: $((ne(variables['Build.Reason'], 'PullRequest')))
  
  - group: dbinclui-api-env-dev
  - group: dbinclui-api-env-secret-dev

  

pool:
  vmImage: ubuntu-latest

stages:
  - stage: CI
    variables:
      # - group: dbinclui-api-env-dev
      # - group: dbinclui-api-env-secret-dev
    jobs:
      - job: CI
        displayName: Run tests, build and push image to ACR
        steps:      
          - task: Npm@1
            displayName: "install dependencies"
            inputs:
              command: "install"

          - task: Npm@1
            displayName: "Build"
         #   condition: or(eq(variables['isTag'], 'true'), eq(variables['isMergePR'], 'true'))
            inputs:
              command: custom
              customCommand: "run build"
          
          - task: Docker@2
            displayName: "build and publish container docker registry"
           # condition: and(succeeded(), or(eq(variables['isMergePR'], 'true'), eq(variables['isTag'], 'true')))
            inputs:
              containerRegistry: 'docker-registry'
              repository: 'dbinclui/backend'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              arguments: '--build-arg HOST=$(HostDBinclui) --build-arg PORT=$(PortDBinclui) --build-arg MONGO_URL=$(MongoUrlDBinclui) --build-arg MONGO_DATABASE=$(MongoDatabaseDBinclui)  --build-arg FIREBASE_TYPE=$(FirebaseTypeDBinclui) --build-arg FIREBASE_PROJECT_ID=$(FirebaseProjectIdDBinclui) --build-arg FIREBASE_PRIVATE_KEY_ID=$(FirebasePrivateKeyIdDBinclui) --build-arg FIREBASE_PRIVATE_KEY=$(FirebasePrivateKeyDBinclui) --build-arg FIREBASE_CLIENT_EMAIL=$(FirebaseClientEmailDBinclui) --build-arg FIREBASE_CLIENT_ID=$(FirebaseClientIdDBinclui) --build-arg FIREBASE_AUTH_URI=$(FirebaseAuthUriDBinclui) --build-arg FIREBASE_TOKEN_URI=$(FirebaseTokenUriDBinclui) --build-arg FIREBASE_AUTH_PROVIDER_X509_CERT_URL=$(FirebaseAuthProviderX509CertUrlDBinclui) --build-arg FIREBASE_CLIENT_X509_CERT_URL=$(FirebaseClientX509CertUrlDBinclui) --build-arg HOST_UPLOAD=$(CloudinaryHostUploadDBinclui) --build-arg CLOUD_NAME=$(CloudinaryNameDBinclui) --build-arg CLOUD_API_KEY=$(CloudinaryApiKeyDBinclui) --build-arg CLOUD_API_SECRET=$(CloudinaryApiSecretDBinclui)'
             # $(( if eq(variables['isTag'], 'true') )):
              #  tags: $(branchName)
             # $(( else )):
              #  tags: |
               #   $(buildId)
                #  latest  
                
  - stage: DeployToDevelopment
    dependsOn: CI
   # condition: and(succeeded(), eq(variables['isMergePR'], 'true'), ne(variables['isTag'], 'true'))
    variables:
      # - group: dbinclui-api-env-secret-dev
     # - group: dbinclui-api-env-dev
      - name: enviroment
        value: "dev"

    jobs:
      - job: ApplyManifests
        displayName: Applying kubernetes manifests
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: env
          - task: ShellScript@2
            displayName: Changing yaml's variables
            inputs:
              scriptPath: "./kubernetes/change_variables.sh"
          - task: Kubernetes@1
            displayName: Create configmap
            inputs:
              connectionType: $(connectionType)
              kubernetesServiceEndpoint: $(aksServiceConnection)
              namespace: $(k8sNamespace)
              containerRegistryType: "Azure Container Registry"
              configMapName: "dbinclui-api-configmap-env"
              forceUpdateConfigMap: true
              configMapArguments:: >
                --from-literal=NODE_ENV=$(NodeEnvDBinclui)
                --from-literal=HOST=$(HostDBinclui)
                --from-literal=PORT=$(PortDBinclui)
                --from-literal=MONGO_URL=$(MongoUrlDBinclui)
                --from-literal=MONGO_DATABASE=$(MongoDatabaseDBinclui)
                --from-literal=FIREBASE_TYPE=$(FirebaseTypeDBinclui)
                --from-literal=FIREBASE_PROJECT_ID=$(FirebaseProjectIdDBinclui)
                --from-literal=FIREBASE_PRIVATE_KEY_ID=$(FirebasePrivateKeyIdDBinclui)
                --from-literal=FIREBASE_PRIVATE_KEY=$(FirebasePrivateKeyDBinclui)
                --from-literal=FIREBASE_CLIENT_EMAIL=$(FirebaseClientEmailDBinclui)
                --from-literal=FIREBASE_CLIENT_ID=$(FirebaseClientIdDBinclui)
                --from-literal=FIREBASE_AUTH_URI=$(FirebaseAuthUriDBinclui)
                --from-literal=FIREBASE_TOKEN_URI=$(FirebaseTokenUriDBinclui)
                --from-literal=FIREBASE_CLIENT_X509_CERT_URL=$(FirebaseClientX509CertUrlDBinclui)
                --from-literal=FIREBASE_AUTH_PROVIDER_X509_CERT_URL=$(FirebaseAuthProviderX509CertUrlDBinclui)
                --from-literal=HOST_UPLOAD=$(CloudinaryHostUploadDBinclui)
                --from-literal=CLOUD_NAME=$(CloudinaryNameDBinclui)
                --from-literal=CLOUD_API_KEY=$(CloudinaryApiKeyDBinclui)
                --from-literal=CLOUD_API_SECRET=$(CloudinaryApiSecretDBinclui)

                  - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes
                  inputs:
                    action: deploy
                    namespace: $(k8sNamespace)
                    kubernetesServiceConnection: $(aksServiceConnection)
                    manifests: |
                      ./kubernetes/deployment.yaml
                      ./kubernetes/service.yaml
                    containers: |
                      $(acrUrl):latest
                - task: Kubernetes@1
                  displayName: Restart service
                  inputs:
                    connectionType: $(connectionType)
                    kubernetesServiceEndpoint: $(aksServiceConnection)
                    namespace: $(k8sNamespace)
                    command: "rollout"
                    arguments: "restart deploy dbinclui-api-dev"
