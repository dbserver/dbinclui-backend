# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr: 
  branches:
    include:
      - main
trigger:
  branches:
    include:
      - main 
  tags:
    include:
      - "*"
variables:
  - name: dockerRepository
    value: "dbinclui/backend"
   
  - name: acrServiceConnection
    value: "docker-registry"

  - name: buildId
    value: $(Build.BuildId)
  
  - name: isTag
    value: ${{startsWith(variables['Build.SourceBranch'],'refs/tags/')}}

  - name: isMergePR
    value: ${{ne(variables['Build.Reason'], 'PullRequest')}}
  
  - name: branchName
    value: $(Build.SourceBranchName)

pool:
  vmImage: ubuntu-latest

stages:
  - stage: CI
    jobs:
      - job: CI
        displayName: Run tests, build and push image to ACR
        steps:      
          - task: Npm@1
            displayName: "install dependencies"
            inputs:
              script: "install"
          - task: Npm@1
            inputs:
              command: 'custom'
              workingDir: './'
              customCommand: 'run test'
          - task: Npm@1
            displayName: "Build Prod"
            condition: or(eq(variables['isTag'], 'true'), eq(variables['isMergePR'], 'true'))
            inputs:
              command: custom
              customCommand: "run build"
          
          - task: Docker@2
            displayName: Building docker image and pushing to ACR
            condition: and(succeeded(), or(eq(variables['isMergePR'], 'true'), eq(variables['isTag'], 'true')))
            inputs:
              containerRegistry: $(acrServiceConnection)
              repository: $(dockerRepository)
              command: "buildAndPush"
              Dockerfile: "**/Dockerfile"
              arguments: '--build-arg NODE_ENV=${NODE_ENV_DBINCLUI} --build-arg HOST=${HOST_DBINCLUI} --build-arg PORT=${PORT_DBINCLUI} --build-arg MONGO_URL=${MONGO_URL_DBINCLUI} --build-arg MONGO_DATABASE=${MONGO_DATABASE_DBINCLUI} --build-arg FIREBASE_TYPE=${FIREBASE_TYPE_DBINCLUI} --build-arg FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID_DBINCLUI} --build-arg FIREBASE_PRIVATE_KEY_ID=${FIREBASE_PRIVATE_KEY_ID_DBINCLUI} --build-arg FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY_DBINCLUI} --build-arg  FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL_DBINCLUI}  --build-arg FIREBASE_CLIENT_ID=${FIREBASE_CLIENT_ID_DBINCLUI} --build-arg FIREBASE_AUTH_URI=${FIREBASE_AUTH_URI_DBINCLUI} --build-arg FIREBASE_TOKEN_URI=${FIREBASE_TOKEN_URI_DBINCLUI} --build-arg FIREBASE_AUTH_PROVIDER_X509_CERT_URL=${FIREBASE_AUTH_PROVIDER_X509_CERT_URL_DBINCLUI} --build-arg FIREBASE_CLIENT_X509_CERT_URL=${FIREBASE_CLIENT_X509_CERT_URL_DBINCLUI}'
             # ${{ if eq(variables['isTag'], 'true') }}:
              #  tags: $(branchName)
             # ${{ else }}:
              #  tags: |
               #   $(buildId)
                #  latest

